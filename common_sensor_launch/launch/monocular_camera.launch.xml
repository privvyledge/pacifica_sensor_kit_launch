<!--
Launch a monocular camera.
Todo: remap here instead of using relay later.
-->

<launch>
  <!-- Camera driver parameters -->
  <arg name="camera_name" default="front"/>
  <arg name="camera_frame" default="camera_link"/>
  <arg name="camera_info_url" default="$(find-pkg-share common_sensor_launch)/config/calibration/$(var camera_name)_info.yaml"/>
  <arg name="video_device" default="/dev/video0"/>
  <arg name="pixel_format" default="mjpeg2rgb"/> <!-- mjpeg2rgb for usb_cam, YUYV for v4l2-->
  <arg name="io_method" default="mmap"/>
  <arg name="output_encoding" default="bgr8"/> <!-- For v4l2 node -->
  <arg name="image_width" default="1920"/>
  <arg name="image_height" default="1080"/>
  <arg name="raw_image_topic" default="image_raw" description="image raw topic name"/>
  <arg name="compressed_image_topic" default="image_raw/compressed" description="image raw topic name"/>
  <arg name="camera_info_topic" default="camera_info" description="image raw topic name"/>

  <!-- Image rectification parameters -->
  <arg name="rectify_image" default="true"/>
<!--  <arg name="rect_image_topic" default="image_rect" description="image rect topic name"/>-->
<!--  <arg name="compressed_rect_image_topic" default="image_rect/compressed" description="image rect topic name"/>-->
  <arg name="queue_size" default="5" description="Size of message queue for synchronizing image and camera_info topics. You may need to raise this if images take significantly longer to travel over the network than camera info" />
  <arg name="container" default="" description="Name of an existing node container to load launched nodes into. If unset, a new container will be created." />

  <!-- launch camera driver using usb_cam package -->
  <node pkg="usb_cam" exec="usb_cam_node_exe" name="$(var camera_name)_node" output="log" ns="$(var camera_name)">
    <param name="camera_name" value="$(var camera_name)"/>
    <param name="frame_id" value="$(var camera_frame)"/>
    <param name="video_device" value="$(var video_device)"/>  <!-- todo: try setting up udev rules -->
    <param name="pixel_format" value="$(var pixel_format)"/>
    <param name="io_method" value="$(var io_method)"/>
    <param name="image_width" value="$(var image_width)"/>
    <param name="image_height" value="$(var image_height)"/>
    <param name="camera_info_url" value="$(var camera_info_url)"/>
<!--    <param name="reliability" value="best_effort"/>-->

    <remap from="image_raw" to="$(var raw_image_topic)"/>
    <remap from="camera_info" to="$(var camera_info_topic)"/>
    <remap from="image_raw/compressed" to="$(var compressed_image_topic)"/>
  </node>

  <!-- launch camera driver using v4l2_camera package -->
<!--  <node pkg="v4l2_camera" exec="v4l2_camera_node" name="$(var camera_name)_node" output="log" ns="$(var camera_name)">-->
<!--    <param name="camera_name" value="$(var camera_name)"/>-->
<!--    <param name="frame_id" value="$(var camera_frame)"/>-->
<!--    <param name="video_device" value="$(var video_device)"/>  &lt;!&ndash; todo: try setting up udev rules &ndash;&gt;-->
<!--    <param name="pixel_format" value="$(var pixel_format)"/>-->
<!--    <param name="io_method" value="$(var io_method)"/>-->
<!--    <param name="output_encoding" value="$(var output_encoding)"/>-->
<!--    <param name="image_size" value="[$(var image_width), $(var image_height)]"/>-->
<!--    <param name="camera_info_url" value="$(var camera_info_url)"/>-->
<!--&lt;!&ndash;    <param name="reliability" value="best_effort"/>&ndash;&gt;-->

<!--    <remap from="image_raw" to="$(var raw_image_topic)"/>-->
<!--    <remap from="camera_info" to="$(var camera_info_topic)"/>-->
<!--    <remap from="image_raw/compressed" to="$(var compressed_image_topic)"/>-->
<!--  </node>-->

  <!-- Undistort and rectify image, i.e image_proc. Also launched using composable nodes.
   Todo: make launch file similar to (https://github.com/ros-perception/image_pipeline/blob/humble/image_proc/launch/image_proc.launch.py) and set parameters appropriately. -->
<!--  <include file="$(find-pkg-share image_proc)/launch/image_proc.launch.py">-->
<!--    <arg name="container" value="$(var container)"/>-->
<!--  </include>-->

  <node pkg="image_proc" exec="image_proc" name="$(var camera_name)_rectification_node" output="log" ns="$(var camera_name)">
    <param name="queue_size" value="$(var queue_size)"/>
<!--    <param name="reliability" value="best_effort"/>-->

    <remap from="image_raw" to="$(var raw_image_topic)"/>
    <remap from="camera_info" to="$(var camera_info_topic)"/>
    <remap from="image_raw/compressed" to="$(var compressed_image_topic)"/>
  </node>

</launch>
