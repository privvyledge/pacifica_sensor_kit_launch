<!--
Steps:
  Launch Azure Kinect camera
  Launch 4 USB_CAM or v4l2 cam nodes
  Relay/rename/remap topics.

Optionally: launch with containers instead
-->

<launch>
  <arg name="launch_driver" default="true"/>

  <!--    common parameters -->
  <arg name="image_0" default="camera_0" description="image raw topic name"/>
  <arg name="image_1" default="camera_1" description="image raw topic name"/>

  <!--    tensorrt params -->
  <arg name="mode" default="FP32"/>
  <arg name="yolo_type" default="yolov3" description="choose image raw number(0-7)"/>
  <arg name="label_file" default="coco.names" description="choose image raw number(0-7)"/>
  <arg name="gpu_id" default="0" description="choose image raw number(0-7)"/>
  <arg name="use_intra_process" default="true"/>
  <arg name="use_multithread" default="true"/>

  <group>
    <push-ros-namespace namespace="camera"/>

    <group>
      <push-ros-namespace namespace="azure"/>

      <!-- launch camera driver -->
<!--      <include file="$(find-pkg-share common_sensor_launch)/launch/azure_kinect_launch.launch.xml">-->
<!--        &lt;!&ndash; Camera driver parameters &ndash;&gt;-->
<!--        <arg name="color_enabled" value="True"/>-->
<!--        <arg name="color_resolution" value="1440P"/>-->
<!--        <arg name="fps" value="30"/>-->
<!--        <arg name="depth_mode" value="NFOV_UNBINNED"/>-->
<!--        <arg name="depth_unit" value="32FC1"/>-->
<!--        <arg name="color_format" value="bgra" description=""/>-->
<!--        <arg name="pointcloud" value="True" description=""/>-->
<!--        <arg name="rgb_point_cloud" value="True"/>-->
<!--        <arg name="imu_rate_target" value="0"/>-->
<!--        <arg name="point_cloud_in_depth_frame" value="False" />-->
<!--        <arg name="overwrite_robot_description" value="False"/>-->
<!--        <arg name="container" value="" />-->
<!--      </include>-->

      <node pkg="topic_tools" exec="relay" name="tl_camera_info_relay" output="log">
        <param name="input_topic" value="$(var camera_type)/camera_info"/>
        <param name="output_topic" value="camera_info"/>
        <param name="type" value="sensor_msgs/msg/CameraInfo"/>
        <param name="reliability" value="best_effort"/>
      </node>

      <node pkg="topic_tools" exec="relay" name="tl_compressed_image_relay" output="log">
        <param name="input_topic" value="$(var camera_type)/image_raw/compressed"/>
        <param name="output_topic" value="image_raw/compressed"/>
        <param name="type" value="sensor_msgs/msg/CompressedImage"/>
        <param name="reliability" value="best_effort"/>
      </node>


      <!-- Launch using containers -->
<!--      <include file="$(find-pkg-share common_sensor_launch)/launch/camera_node_container.launch.py">-->
<!--        <arg name="mode" value="$(var mode)"/>-->
<!--        <arg name="input_image" value="$(var image_0)"/>-->
<!--        <arg name="camera_container_name" value="front_camera_container"/>-->
<!--        <arg name="yolo_type" value="$(var yolo_type)"/>-->
<!--        <arg name="label_file" value="$(var label_file)"/>-->
<!--        <arg name="gpu_id" value="$(var gpu_id)"/>-->
<!--        <arg name="use_intra_process" value="$(var use_intra_process)"/>-->
<!--        <arg name="use_multithread" value="$(var use_multithread)"/>-->
<!--        <arg name="output_topic" value="camera0/rois0"/>-->
<!--      </include>-->
<!--      <include file="$(find-pkg-share common_sensor_launch)/launch/camera_node_container.launch.py">-->
<!--        <arg name="mode" value="$(var mode)"/>-->
<!--        <arg name="input_image" value="$(var image_1)"/>-->
<!--        <arg name="camera_container_name" value="front_camera_container"/>-->
<!--        <arg name="yolo_type" value="$(var yolo_type)"/>-->
<!--        <arg name="label_file" value="$(var label_file)"/>-->
<!--        <arg name="gpu_id" value="$(var gpu_id)"/>-->
<!--        <arg name="use_intra_process" value="$(var use_intra_process)"/>-->
<!--        <arg name="use_multithread" value="$(var use_multithread)"/>-->
<!--        <arg name="output_topic" value="camera1/rois1"/>-->
<!--      </include>-->
    </group>

    <group>
      <push-ros-namespace namespace="front"/>

<!--      &lt;!&ndash; launch camera driver &ndash;&gt;-->
<!--      <include file="$(find-pkg-share common_sensor_launch)/launch/monocular_camera.launch.xml">-->
<!--        &lt;!&ndash; Camera driver parameters &ndash;&gt;-->
<!--        <arg name="camera_name" value="front"/>-->
<!--        <arg name="camera_frame" value="camera_link"/>-->
<!--        <arg name="camera_info_url" value="$(find-pkg-share common_sensor_launch)/config/$(var camera_name).yaml"/>-->
<!--        <arg name="video_device" value="/dev/video0"/>-->
<!--        <arg name="pixel_format" value="mjpeg2rgb"/> &lt;!&ndash; mjpeg2rgb for usb_cam, YUYV for v4l2&ndash;&gt;-->
<!--        <arg name="io_method" value="mmap"/>-->
<!--        <arg name="output_encoding" value="bgr8"/> &lt;!&ndash; For v4l2 node &ndash;&gt;-->
<!--        <arg name="image_width" value="1920"/>-->
<!--        <arg name="image_height" value="1080"/>-->
<!--        <arg name="raw_image_topic" value="image_raw" description="image raw topic name"/>-->
<!--        <arg name="compressed_image_topic" value="image_raw/compressed" description="image raw topic name"/>-->
<!--        <arg name="camera_info_topic" value="camera_info" description="image raw topic name"/>-->

<!--        &lt;!&ndash; Image rectification parameters &ndash;&gt;-->
<!--        <arg name="rectify_image" value="true"/>-->
<!--      &lt;!&ndash;  <arg name="rect_image_topic" value="image_rect" description="image rect topic name"/>&ndash;&gt;-->
<!--      &lt;!&ndash;  <arg name="compressed_rect_image_topic" value="image_rect/compressed" description="image rect topic name"/>&ndash;&gt;-->
<!--        <arg name="queue_size" value="5" />-->
<!--        <arg name="container" value="" />-->
<!--      </include>-->

<!--      <node pkg="topic_tools" exec="relay" name="tl_camera_info_relay" output="log">-->
<!--        <param name="input_topic" value="$(var camera_type)/camera_info"/>-->
<!--        <param name="output_topic" value="camera_info"/>-->
<!--        <param name="type" value="sensor_msgs/msg/CameraInfo"/>-->
<!--        <param name="reliability" value="best_effort"/>-->
<!--      </node>-->

<!--      <node pkg="topic_tools" exec="relay" name="tl_compressed_image_relay" output="log">-->
<!--        <param name="input_topic" value="$(var camera_type)/image_raw/compressed"/>-->
<!--        <param name="output_topic" value="image_raw/compressed"/>-->
<!--        <param name="type" value="sensor_msgs/msg/CompressedImage"/>-->
<!--        <param name="reliability" value="best_effort"/>-->
<!--      </node>-->


      <!-- Launch using containers -->
      <include file="$(find-pkg-share common_sensor_launch)/launch/camera_node_container.launch.py">
        <arg name="camera_name" value="camera0"/>
        <arg name="input_image" value="image_raw"/>
        <arg name="video_device" value="/dev/video0"/>
        <arg name="framerate" value="30"/>
        <arg name="camera_info" value="camera_info"/>
        <arg name="camera_info_file" value="$(find-pkg-share common_sensor_launch)/config/calibration/$(var camera_name)_info.yaml"/>

        <arg name="camera_container_name" value="front_camera_container"/>
        <arg name="precision" value="fp16"/>
        <arg name="model_name" value="yolox-tiny"/>
        <arg name="label_file" value="$(var label_file)"/>
        <arg name="use_intra_process" value="$(var use_intra_process)"/>
        <arg name="use_multithread" value="$(var use_multithread)"/>
        <arg name="output_topic" value="camera0/rois0"/>
      </include>

<!--      <include file="$(find-pkg-share common_sensor_launch)/launch/camera_node_container.launch.py">-->
<!--        <arg name="mode" value="$(var mode)"/>-->
<!--        <arg name="input_image" value="$(var image_1)"/>-->
<!--        <arg name="camera_container_name" value="front_camera_container"/>-->
<!--        <arg name="yolo_type" value="$(var yolo_type)"/>-->
<!--        <arg name="label_file" value="$(var label_file)"/>-->
<!--        <arg name="gpu_id" value="$(var gpu_id)"/>-->
<!--        <arg name="use_intra_process" value="$(var use_intra_process)"/>-->
<!--        <arg name="use_multithread" value="$(var use_multithread)"/>-->
<!--        <arg name="output_topic" value="camera1/rois1"/>-->
<!--      </include>-->
    </group>
  </group>
</launch>
